app:
  image:
    registry: docker.io
    repository: kittipol/helloworld   # (Optional) Default: .Release.Name
    tag: latest
    pullPolicy: Always
    pullSecret: image-secret-helm     # (Optional)
    containerPort: 4200               # (Optional)
  readinessProbe:
    enabled: true
    path: /api/health
  livenessProbe:
    enabled: true
    path: /api/health

volumeMounts:
  enabled: true
  volumes:

    # Export env variable from inline data and mount as config.json file
    - name: env-volume
      type: configMap
      mountPath: /app/dist/app/browser/assets/env/
      spec: 
        name: env-from-file
        asEnvVar: ENV_FROM_FILE # (Optional) Environment variable
        fileName: config.json
        value: |
          {
            "hello": "world"
          }

    # Export env variable from json file and mount as config.json file
    - name: json-from-file-as-env
      type: configMap
      mountPath: /app/assets/
      spec: 
        name: env-from-file           # Configmap name
        asEnvVar: MY_CONFIG           # (Optional) Environment variable
        fileName: config.json         # Filename in configmap
        fromFile: ./config.json       # Path to your json file

    # mounting persistance volume claim into pods from azure disk
    - name: my-azure-managed-disk
      type: azureDisk
      mountPath: /tmp/data/
      spec:
        diskName: pvcRestored
        diskURI: /subscriptions/19da35d3-9a1a-4f3b-9b9c-3c56ef409565/resourceGroups/MC_myResourceGroupAKS_myAKSCluster_eastus/providers/Microsoft.Compute/disks/pvcRestored

    # mounting persistance volume claim into pods from existing pvc
    - name: my-existing-pvc
      type: persistentVolumeClaim
      mountPath: /tmp/app/
      spec:
        claimName: azure-default-disk

    # mounting emptyDir volume
    - name: my-empty-dir
      type: emptyDir
      mountPath: /mnt/azure

service:
  enabled: true
  name: angular
  ports:
    - name: proxy
      port: 8080
      targetPort: 4200
      protocol: TCP

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/affinity: cookie
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/service-upstream: "true"
    nginx.ingress.kubernetes.io/upstream-vhost: angular.myabc-ns.svc.cluster.local
  paths:
    - path: /
      backend:
        servicePort: 8080
  http:
    - domainName: 
        - example.com
      tls: null
    - domainName: 
        - example2.com
      tls:
        existingSecret: null
        cert:
          path: ./
          fileName: "*"
    - domainName: 
        - example3.com
      tls:
        existingSecret: my-tls-secret
  
ConfigMap:
  enabled: true
  data:
    - name: NODE_ENV
      value: "dynamic"
    - name: PRODUCTION
      value: false
    - name: USEMOCK
      value: false
    - name: AUTH_METHOD
      value: "saml"
    - name: AF_API_INTERNAL_URL
      value: "http://myabc-app:8080"
    - name: AF_PORTAL_URL
      value: "https://example.com"
    - name: LOG_LEVEL
      value: "debug"

env:
  enabled: true
  data:
    - name: MY_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: ABC
      value: "haha"

# key Vault for public cloud provider
keyVault:
  enabled: true
  config:
    autoVolume: true
    provider: azure
    driver: secrets-store.csi.k8s.io
    resourceGroup: rg-example
    subscriptionId: example-subscription-id
    tenantId: 6e06e42d-6925-47c6-b9e7-9581c7ca302a
    secretRef: secrets-store-creds-helm
    cloudName: AzurePublicCloud
    vaultName: kv-allianz-for-dev-ub79
  objects:
    - secretName: akssecret
      type: Opaque
      data:
        - name: session-secret
          key: SESSION_SECRET