{{- if and (eq .Values.keyVault.enabled true) (eq .Values.keyVault.config.provider "azure") -}}
apiVersion: secrets-store.csi.x-k8s.io/v1alpha1
kind: SecretProviderClass
metadata:
  name: {{ .Release.Name }}--secret-provider
spec:
  provider: {{ .Values.keyVault.config.provider }}

  # declare for secret name
  {{ $secretMeta := printf "%s--%s" .Release.Name "keyvault" }}

  # create secret that get from azure key vault
  secretObjects:
  {{ range $index, $value := .Values.keyVault.objects }}

    # define secret name (secret name in kubernetes)
    - secretName: {{ $value.secretName }}-{{ $secretMeta }}
      type: {{ $value.type | default "Opaque" }}

      # object name that match with azure key vault
      # define key name in kubernetes secret
      data:
        {{ range $i, $v := $value.data }}
        - objectName: {{ $v.name }}
          key: {{ $v.key }}
        {{ end }}
  {{- end -}}

  # provider configuration
  parameters:
    usePodIdentity: "false"
    cloudName: {{ .Values.keyVault.config.cloudName | default "AzurePublicCloud" | quote }}
    keyvaultName: {{ .Values.keyVault.config.vaultName | quote }}
    objects: |
      array:
      {{ range $index, $value := .Values.keyVault.objects }}
        {{ range $i, $v := $value.data }}
        - |
          objectName: {{ $v.name }}
          objectType: {{ $v.type | default "secret" }}
          objectVersion: {{ $v.version | default "" }}
        {{ end }}
      {{ end }}
    resourceGroup: {{ .Values.keyVault.config.resourceGroup | quote }}
    subscriptionId: {{ .Values.keyVault.config.subscriptionId | quote }}
    tenantId: {{ .Values.keyVault.config.tenantId | quote }}

{{- end -}}