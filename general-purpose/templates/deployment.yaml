apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ .Release.Name }}

spec:
  # Number of pod
  replicas: {{ .Values.app.replicas | default 1 }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        deploy-date: {{ date "20060102150405" now | quote }}
    spec:
      containers:
      - name: {{ .Release.Name }}
        # Check image coming from local machine
        {{  $repository := .Values.app.image.repository | default .Release.Name }}
        {{  $registry := .Values.app.image.registry | default "docker.io" }}
        image: {{ $registry }}/{{ $repository }}:{{ .Values.app.image.tag }}
        imagePullPolicy: {{ .Values.app.image.pullPolicy | default "Always" }}
        ports:
          - name: http
            containerPort: {{ .Values.app.image.containerPort | default 80 }}
            protocol: TCP

        # Environment as file from configMap
        {{ if .Values.volumeMounts.enabled }}
        volumeMounts:
          {{ range $key, $value := .Values.volumeMounts.volumes }}
          {{ if $value }}
          - name: {{ $value.name }}
            mountPath: {{ $value.mountPath | quote }}
            readOnly: {{ $value.readOnly | default false }}
          {{ end }}
          {{ end }}

          {{ if and .Values.keyVault.enabled .Values.keyVault.config.autoVolume }} # auto mount volume, look at `keyVault.config.autoVolume`
          - name: vault
            mountPath: /mnt/vault
            readOnly: true
          {{ end }}
        {{ end }}

        # Health Check
        {{ if .Values.app.readinessProbe }}
        {{ if .Values.app.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: {{ .Values.app.readinessProbe.path | default "/" }}
            port: {{ .Values.app.image.containerPort | default 80 }}
            {{ if .Values.app.livenessProbe.httpHeaders }}
            httpHeaders: {{ .Values.app.livenessProbe.headers }}
            {{ end }}
          initialDelaySeconds: {{ .Values.app.readinessProbe.initialDelaySeconds | default 0 }}
          periodSeconds: {{ .Values.app.readinessProbe.periodSeconds | default 10 }}
          successThreshold: {{ .Values.app.readinessProbe.successThreshold | default 1 }}
          failureThreshold: {{ .Values.app.readinessProbe.failureThreshold | default 300 }}
        {{ end }}
        {{ end }}

        {{ if .Values.app.livenessProbe }}
        {{ if .Values.app.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: {{ .Values.app.livenessProbe.path | default "/" }}
            port: {{ .Values.app.image.containerPort | default 80 }}
            {{ if .Values.app.livenessProbe.httpHeaders }}
            httpHeaders: {{ .Values.app.livenessProbe.headers }}
            {{ end }}
          initialDelaySeconds: {{ .Values.app.livenessProbe.initialDelaySeconds | default 0 }}
          periodSeconds: {{ .Values.app.livenessProbe.periodSeconds | default 10 }}
          successThreshold: {{ .Values.app.livenessProbe.successThreshold | default 1 }}
          failureThreshold: {{ .Values.app.livenessProbe.failureThreshold | default 300 }}
        {{ end }}
        {{ end }}

        # Limit & Request for pod(s)
        resources:
          {{- toYaml .Values.resources | nindent 10 }}

        # Defined variable configMapMeta.
        {{-  $configMapMeta := printf "%s--%s" .Release.Name "configmap" -}}
        # Defined variable secretMeta.
        {{ $secretMeta := printf "%s--%s" .Release.Name "keyvault" }}

        # Environment variable injection
        env:
          # Check ConfigMap is enabled
          {{ if .Values.ConfigMap.enabled }}
          # Inject env to the application.
          {{ range $key, $value := .Values.ConfigMap.data }}
          - name: {{ $value.name }}
            valueFrom:
              configMapKeyRef:
                name: {{ $configMapMeta }}
                key: {{ $value.name }}
          {{ end }}
          {{ end }}
          # Check Secret is enabled
          {{ if .Values.keyVault.enabled }}
          # Inject env to the application.
          {{ range $key, $value := .Values.keyVault.objects }}
          {{ range $i, $v := $value.data }}
          - name: {{ $v.name }}
            valueFrom:
              secretKeyRef:
                name: {{ $value.secretName }}-{{ $secretMeta }}
                key: {{ $v.key }}
          {{ end }}
          {{ end }}
          {{ end }}

      # dynamic env value mount from config map
      {{ if .Values.volumeMounts.enabled }}
      {{- $releaseName := .Release.Name -}}
      {{- $secret := .Values.keyVault -}}
      volumes:
        {{ if .Values.volumeMounts.volumes }}
        {{ range $key, $value := .Values.volumeMounts.volumes }}
        - name: {{ $value.name }}
          # Empty Dir
          {{ if eq $value.type "emptyDir" }}  # check for create volume as empty (empty volume)
          emptyDir: {}
          # ConfigMap
          {{ else if eq $value.type "configMap" }}  # check for create volume from configMap (configMap volume)
          configMap:
            name: {{ $value.spec.name }}-{{ $releaseName }}--configmap
            items:
            - key: {{ $value.spec.fileName }}
              path: {{ $value.spec.fileName }}
          # CSI Driver for Key Vault
          {{ else if and (eq $value.type "csi") (eq $secret.enabled true) }}
          csi:
            driver: {{ $secret.config.driver | default "secrets-store.csi.k8s.io" }}
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ $releaseName }}--secret-provider
            nodePublishSecretRef:
              name: {{ $secret.config.secretRef | quote }} # secret name that create in namespace before helm install
          {{ end }}
        {{ end }}
        {{ end }}
        {{ if and .Values.keyVault.enabled .Values.keyVault.config.autoVolume }} # auto create volume option for Key Vault
        - name: vault
          csi:
            driver: {{ $secret.config.driver | default "secrets-store.csi.k8s.io" }}
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ $releaseName }}--secret-provider
            nodePublishSecretRef:
              name: {{ $secret.config.secretRef | quote }} # secret name that create in namespace before helm install
        {{ end }}
      {{ end }}

  # Deployment strategy
  strategy:
    {{- toYaml .Values.strategy | nindent 4 }}
