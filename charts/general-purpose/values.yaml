app:
  # name: myhelloworldapp
  image:
    registry: docker.io
    repository: nginxinc/nginx-unprivileged    # (Optional) Default: .Values.app.name | default .Release.Name
    tag: latest
    pullPolicy: Always

    # pullSecret: image-secret-helm
    pullSecret: null

    # containerPort: 4200
    containerPort: null

  readinessProbe:
    enabled: false
    path: /api/health
  livenessProbe:
    enabled: false
    path: /api/health

  # Pod annotations
  annotations: {}

  # Container-level securityContext
  securityContext:
    enabled: false
    spec:
      runAsUser: 1001
      runAsGroup: 1001
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true

# Pod-level securityContext
securityContext:
  enabled: false
  spec:
    fsGroup: 1001
    supplementalGroups:
    - 1001

initContainers:
  enabled: false
  containers:
  - name: install
    image: busybox
    command:
    - wget
    - "-O"
    - "/work-dir/index.html"
    - http://info.cern.ch
    volumeMounts:
    - name: workdir
      mountPath: /work-dir

volumeMounts:
  enabled: false
  volumes:

  # Export env variable from inline data and mount as config.json file
  - name: env-volume
    type: configMap
    mountPath: /app/dist/app/browser/assets/env/
    spec:
      name: env-from-file
      asEnvVar: ENV_FROM_FILE    # (Optional) Environment variable
      fileName: config.json
      value: |
        {
          "hello": "world"
        }

  # Export env variable from json file and mount as config.json file
  - name: json-from-file-as-env
    type: configMap
    mountPath: /app/assets/
    spec:
      name: env-from-file           # Configmap name
      asEnvVar: MY_CONFIG           # (Optional) Environment variable
      fileName: config.json         # Filename in configmap
      fromFile: ./config.json       # Path to your json file

  # mounting persistance volume claim into pods from azure disk
  - name: my-azure-managed-disk
    type: azureDisk
    mountPath: /tmp/data/
    spec:
      diskName: pvcRestored
      diskURI: /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MC_myResourceGroupAKS_myAKSCluster_eastus/providers/Microsoft.Compute/disks/pvcRestored

  # mounting persistance volume claim into pods from existing pvc
  - name: my-existing-pvc
    type: persistentVolumeClaim
    mountPath: /tmp/app/
    spec:
      claimName: azure-default-disk

  # mounting emptyDir volume
  - name: workdir
    type: emptyDir
    mountPath: /work-dir

service:
  enabled: false
  name: nginx
  ports:
  - name: proxy
    port: 80
    targetPort: 8080
    protocol: TCP

ingress:
  enabled: false
  ingresses:
  - name: my-internal-ingress
    annotations:
      nginx.ingress.kubernetes.io/service-upstream: "true"
      nginx.ingress.kubernetes.io/upstream-vhost: nginx.myabc-ns.svc.cluster.local
    ingressClassName: nginx
    paths:
    - path: /
      pathType: ImplementationSpecific    # this is default value
      backend:
        serviceName: nginx
        servicePort: 80
    http:
      - domainName:
        - example.com
        tls: null
      - domainName:
        - example2.com
        tls:
          existingSecret: null
          cert:
            name: pubcert
            path: certificates/pub    # path to certificate directory
            fileName: "*"
  - name: my-internet-ingress
    annotations:
      nginx.ingress.kubernetes.io/service-upstream: "true"
      nginx.ingress.kubernetes.io/upstream-vhost: nginx.myabc-ns.svc.cluster.local
    ingressClassName: nginx-internet
    paths:
    - path: /
      pathType: ImplementationSpecific    # this is default value
      backend:
        serviceName: nginx
        servicePort: 80
    http:
    - domainName:
      - example3.com
      - example4.com
      tls:
        existingSecret: my-tls-secret
    - domainName:
      - example5.com
      tls:
        existingSecret: null
        cert:
          name: extcert
          path: certificates/ext    # path to certificate directory
          fileName: "*"
    defaultBackend:
      service:
        name: default-http-backend
        port:
          number: 80

ConfigMap:
  enabled: false
  data:
  - name: NODE_ENV
    value: "dynamic"
  - name: PRODUCTION
    value: false
  - name: USEMOCK
    value: false
  - name: AUTH_METHOD
    value: "saml"
  - name: INTERNAL_URL
    value: "http://myabc-app:8080"
  - name: PORTAL_URL
    value: "https://example.com"
  - name: LOG_LEVEL
    value: "debug"

envFrom:
  enabled: false

# envFrom:
#   enabled: false
#   data:
#     - configMapRef:
#           name: env-proxy

env:
  enabled: false
  data:
  - name: MY_NODE_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  - name: ABC
    value: "haha"

# key Vault for public cloud provider
keyVault:
  enabled: false
  config:
    autoVolume: true
    provider: azure
    driver: secrets-store.csi.k8s.io
    resourceGroup: rg-example
    subscriptionId: example-subscription-id
    tenantId: 00000000-0000-0000-0000-000000000000
    secretRef: secrets-store-creds-helm
    cloudName: AzurePublicCloud
    vaultName: kv-dev-ub79
  objects:
  - secretName: akssecret
    type: Opaque
    data:
    - name: session-secret
      key: SESSION_SECRET

resources: {}
