{{- $releaseName := .Values.app.name | default .Release.Name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.app.name | default .Release.Name }}
  labels:
    app: {{ .Values.app.name | default .Release.Name }}

spec:
  # Number of pod
  replicas: {{ .Values.app.replicas | default 1 }}
  selector:
    matchLabels:
      app: {{ .Values.app.name | default .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Values.app.name | default .Release.Name }}
        deploy-date: {{ date "20060102150405" now | quote }}
      annotations:
        {{- toYaml .Values.app.annotations | nindent 8 }}
    spec:
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}

      {{ if .Values.securityContext.enabled }}
      securityContext:
        {{- toYaml .Values.securityContext.spec | nindent 8 }}
      {{ end }}
      {{ if .Values.initContainers.enabled }}
      initContainers:
        {{- toYaml .Values.initContainers.containers | nindent 8 }}
      {{ end }}
      containers:
      - name: {{ .Values.app.name | default .Release.Name }}
        # Check image coming from local machine
        {{  $repository := (.Values.app.image.repository | default .Values.app.name) | default .Release.Name }}
        {{  $registry := .Values.app.image.registry | default "docker.io" }}
        image: {{ $registry }}/{{ $repository }}:{{ .Values.app.image.tag }}
        imagePullPolicy: {{ .Values.app.image.pullPolicy | default "Always" }}
        {{ if .Values.app.image.containerPort }}
        ports:
          - name: http
            containerPort: {{ .Values.app.image.containerPort | default 80 }}
            protocol: TCP
        {{ end }}
        {{ if .Values.app.image.command }}
        command:
          {{- toYaml .Values.app.image.command | nindent 10 }}
        {{ end }}
        {{ if .Values.app.image.args }}
        args: 
          {{- toYaml .Values.app.image.args | nindent 10 }}
        {{ end }}
        {{ if .Values.app.securityContext.enabled }}
        securityContext:
          {{- toYaml .Values.app.securityContext.spec | nindent 10 }}
        {{ end }}

        # Environment as file from configMap
        {{ if or .Values.volumeMounts.enabled .Values.keyVault.enabled }}
        volumeMounts:
          {{ range $key, $value := .Values.volumeMounts.volumes }}
          {{ if $value }}
          - name: {{ $value.name }}
            mountPath: {{ $value.mountPath | quote }}
            readOnly: {{ $value.readOnly | default false }}
            {{ if $value.subPath }}
            subPath: {{ $value.subPath }}
            {{ end }}
          {{ end }}
          {{ end }}

          {{ if .Values.keyVault.enabled }}
          {{ if .Values.keyVault.config.autoVolume }} # auto mount volume, look at `keyVault.config.autoVolume`
          - name: vault
            mountPath: /mnt/vault
            readOnly: true
          {{ end }}
          {{ end }}
        {{ end }}

        # Health Check
        {{ if .Values.app.readinessProbe }}
        {{ if .Values.app.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: {{ .Values.app.readinessProbe.path | default "/" }}
            port: {{ .Values.app.image.containerPort | default 80 }}
            {{ if .Values.app.readinessProbe.httpHeaders }}
            httpHeaders: {{ .Values.app.readinessProbe.headers }}
            {{ end }}
          initialDelaySeconds: {{ .Values.app.readinessProbe.initialDelaySeconds | default 0 }}
          periodSeconds: {{ .Values.app.readinessProbe.periodSeconds | default 10 }}
          successThreshold: {{ .Values.app.readinessProbe.successThreshold | default 1 }}
          failureThreshold: {{ .Values.app.readinessProbe.failureThreshold | default 300 }}
        {{ end }}
        {{ end }}

        {{ if .Values.app.livenessProbe }}
        {{ if .Values.app.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: {{ .Values.app.livenessProbe.path | default "/" }}
            port: {{ .Values.app.image.containerPort | default 80 }}
            {{ if .Values.app.livenessProbe.httpHeaders }}
            httpHeaders: {{ .Values.app.livenessProbe.headers }}
            {{ end }}
          initialDelaySeconds: {{ .Values.app.livenessProbe.initialDelaySeconds | default 0 }}
          periodSeconds: {{ .Values.app.livenessProbe.periodSeconds | default 10 }}
          successThreshold: {{ .Values.app.livenessProbe.successThreshold | default 1 }}
          failureThreshold: {{ .Values.app.livenessProbe.failureThreshold | default 300 }}
        {{ end }}
        {{ end }}

        # Limit & Request for pod(s)
        resources:
          {{- toYaml .Values.resources | nindent 10 }}

        # Defined variable configMapMeta.
        {{-  $configMapMeta := $releaseName -}}
        # Defined variable secretMeta.
        {{ $secretMeta := printf "%s-%s" "keyvault" $releaseName }}

        # Use envFrom to define all of the configMap's data as container environment variables
        envFrom:
          {{ if .Values.envFrom.enabled }}
          {{- toYaml .Values.envFrom.data | nindent 10 }}
          {{ end }}

        # Environment variable injection
        env:

          # Check Env is enabled
          {{ if .Values.env.enabled }}
          # then inject env to the application.
          {{- toYaml .Values.env.data | nindent 10 }}
          {{ end }}

          # Check configMap is enabled
          {{ if .Values.configMap.enabled }}

          # Inject env to the application.
          {{ range $key, $value := .Values.configMap.data }}
          - name: {{ $value.name }}
            valueFrom:
              configMapKeyRef:
                name: {{ $configMapMeta }}
                key: {{ $value.name }}
          {{ end }}
          {{ end }}

          # Env variable from Secret (Azure Keyvault)
          # Check Secret is enabled
          {{ if .Values.keyVault.enabled }}
          {{ range $key, $value := .Values.keyVault.objects }}
          {{ range $i, $v := $value.data }}
          - name: {{ $v.key }}
            valueFrom:
              secretKeyRef:
                name: {{ $secretMeta }}-{{ $value.secretName }}
                key: {{ $v.key }}
          {{ end }}
          {{ end }}
          {{ end }}

          # Env variable from volumeMounts (configMap)
          {{ if .Values.volumeMounts.enabled }}
          {{ if .Values.volumeMounts.volumes }}
          {{ range $key, $value := .Values.volumeMounts.volumes }}
          {{ if eq $value.type "configMap" }}
          {{ if $value.spec.asEnvVar }}
          - name: {{ $value.spec.asEnvVar }}
            valueFrom:
              configMapKeyRef:
                name: {{ $value.spec.name }}
                key: {{ $value.spec.fileName }}
          {{ end }}
          {{ end }}
          {{ end }}
          {{ end }}
          {{ end }}
          
      {{ if .Values.app.image.pullSecret }}
      imagePullSecrets:
      - name: {{ .Values.app.image.pullSecret }}
      {{ end }}

      # dynamic env value mount from config map
      {{ if or .Values.volumeMounts.enabled .Values.keyVault.enabled }}
      {{- $secret := .Values.keyVault -}}
      volumes:
        {{ if .Values.volumeMounts.enabled }}
        {{ if .Values.volumeMounts.volumes }}
        {{ range $key, $value := .Values.volumeMounts.volumes }}
        {{ if $value }}
          
        {{ if eq $value.type "emptyDir" }} 
        # Empty Dir
        - name: {{ $value.name }}
          emptyDir: {}
          
        {{ else if eq $value.type "configMap" }}
        # configMap
        - name: {{ $value.name }}
          configMap:
            name: {{ $value.spec.name }}
            items:
            - key: {{ $value.spec.fileName }}
              path: {{ $value.spec.fileName }}

        {{ else if eq $value.type "azureDisk" }}
        # Azure Disk
        - name: {{ $value.name }}
          azureDisk:
            kind: Managed
            diskName: {{ $value.spec.diskName }}
            diskURI: {{ $value.spec.diskURI }}

        {{ else if eq $value.type "persistentVolumeClaim" }}
        # Existing PVC
        - name: {{ $value.name }}
          persistentVolumeClaim:
            claimName: {{ $value.spec.claimName }}
          {{ end }}

        {{ end }}
        {{ end }}
        {{ end }}
        {{ end }}

        {{ if .Values.keyVault.enabled }}
        - name: vault
          csi:
            driver: {{ $secret.config.driver | default "secrets-store.csi.k8s.io" }}
            readOnly: true
            volumeAttributes:
              secretProviderClass: secret-provider-{{ $releaseName }}
            nodePublishSecretRef:
              name: {{ $secret.config.secretRef | quote }} # secret name that create in namespace before helm install
        {{ end }}
        
      {{ end }}

  # Deployment strategy
  strategy:
    {{- toYaml .Values.strategy | nindent 4 }}
